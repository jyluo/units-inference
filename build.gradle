/// Why doesn't this work on Travis under Java 7?
/// The same text does in Randoop's build.gradle file.
plugins {
    id 'com.github.johnrengelman.shadow' version '2.0.4'
}

apply plugin: 'java'

repositories {
    jcenter()
    mavenCentral()
}

ext {
    assert JavaVersion.current() == JavaVersion.VERSION_1_8: "Set JAVA_HOME to JDK 8. Current version is ${JavaVersion.current()}"
    jsr308 = System.getenv('JSR308') ?: file(new File("..")).absolutePath
    cf = "${jsr308}/checker-framework"
    cfi = "${jsr308}/checker-framework-inference"
    jsr308langtools = "${jsr308}/jsr308-langtools"
    afu = "${jsr308}/annotation-tools/annotation-file-utilities"
    units = "${jsr308}/units-inference"
    formatScripts = "${units}/scripts/.run-google-java-format"
}

println '==================================='
println '      Units Inference Checker      '
println '==================================='
println ''
println '-------------------------------'
println 'Important Environment Variables'
println '-------------------------------'
println 'JSR308: ' + jsr308
println 'CF:     ' + cf
println 'CFI:    ' + cfi


dependencies {
    compile fileTree(dir: "${cf}/checker/dist", include: "checker.jar")
    compile fileTree(dir: "${cfi}/dist", include: "checker-framework-inference.jar")
    // sat4j solver dependency
    compile 'org.ow2.sat4j:org.ow2.sat4j.core:2.3.4'
    compile 'org.ow2.sat4j:org.ow2.sat4j.maxsat:2.3.4'
    // z3 solver dependency
    compile fileTree(dir: "${cfi}/lib", include: "com.microsoft.z3.jar")

    // CF test lib dependency
    testCompile fileTree(dir: "${cf}/framework-test/build/libs", include: "framework-test-*.jar")
    testCompile fileTree(dir: "${cfi}/dist", include: "inference-framework-test-lib.jar")
    testCompile 'junit:junit:4.12'
}

sourceSets {
    main {
        java {
            srcDirs = ["src"]
        }

        resources {
            srcDirs = ["src"]
            include "**/*.astub"
        }
    }

    test {
        java {
            srcDirs = ["tests"]
        }
    }
}

compileJava {
    dependsOn('installGitHooks')
    options.compilerArgs = [
            '-implicit:class',
            '-Awarns',
            '-Xmaxwarns', '10000',
    ]
}

afterEvaluate {
    // Create a task for each JUnit test class whose name is the same as the JUnit class name.
    sourceSets.test.allJava.filter { it.path.contains("${units}/tests") }.forEach { file ->
        String junitClassName = file.name.replaceAll(".java", "")
        String testName = junitClassName.replaceAll("Test", "")
        tasks.create(name: "${junitClassName}", type: Test) {
            description "Run ${testName} tests."
            include "**/${name}.class"
        }
    }

    // Configure JUnit tests
    tasks.withType(Test) {
        group 'Verification'

        systemProperties 'path.afu.scripts': "${afu}/scripts",
                'path.inference.script': "${cfi}/scripts/inference",
                JDK_JAR: "${cf}/checker/dist/jdk8.jar"

        environment "external_checker_classpath", "${units}/build/classes/java/main:${units}/build/resources/main"

        jvmArgs "-Xbootclasspath/p:${cfi}/dist/javac.jar"

        testLogging {
            // Always run the tests
            outputs.upToDateWhen { false }
            // The following prints out each time a test is passed.
            events "passed", "skipped", "failed", "standardOut", "standardError"

            // Show the found unexpected diagnostics and expected diagnostics not found.
            exceptionFormat "full"
            showExceptions true
            showCauses true
            showStackTraces true
        }

        // remove the generated .smt files
        afterTest {
            ant.delete() {
                fileset(dir: ".") {
                    include(name: "*.smt")
                }
            }
        }

        // After each test, print a summary.
        afterSuite { desc, result ->
            if (desc.getClassName() != null) {
                long mils = result.getEndTime() - result.getStartTime()
                double seconds = mils / 1000.0

                println "Testsuite: ${desc.getClassName()}\n" +
                        "Tests run: ${result.testCount}, " +
                        "Failures: ${result.failedTestCount}, " +
                        "Skipped: ${result.skippedTestCount}, " +
                        "Time elapsed: ${seconds} sec\n"
            }
        }
    }
}

// [assemble, shadowJar]
task dist(dependsOn: assemble, type: Copy) {
    // description = "If your Checker Framework project is fully built, this task " +
    //         "will build checker-framework-inference.jar, copy all the relevant runtime jars into " +
    //         "the dist directory."
    // from files(
    //         "${checkerFrameworkPath}/checker/dist/jdk8.jar",
    //         "${checkerFrameworkPath}/checker/dist/checker.jar",
    //         "${checkerFrameworkPath}/checker/dist/checker-qual.jar",
    //         "${checkerFrameworkPath}/checker/dist/javac.jar",
    // )
    // into file('dist')
}

task cleanTestOutput(type: Delete) {
    delete += "testdata"
    delete += fileTree(".").matching { include "*.smt" }
}

tasks.clean {
    delete += "build"
}
tasks.clean.dependsOn 'cleanTestOutput'

task getCodeFormatScripts() {
    description 'Obtain or update the run-google-java-format scripts'
    if (file(formatScripts).exists()) {
        exec {
            workingDir formatScripts
            executable 'git'
            args = ['pull', '-q']
            ignoreExitValue = true
        }
    } else {
        exec {
            workingDir "${formatScripts}/../"
            executable 'git'
            args = ['clone', '-q', 'https://github.com/plume-lib/run-google-java-format.git', '.run-google-java-format']
        }
    }
}

task pythonIsInstalled(type: Exec) {
  description "Check that the python executable is installed."
  executable = "python"
  args "--version"
}

/**
 * Returns a list of all the Java files that should be formatted for the given project. These are:
 *
 * All java files in the main sourceSet.
 * All java files in the tests directory that compile.
 *
 * @param projectName name of the project to format
 * @return a list of all Java files that should be formatted for projectName
 */
List<String> getJavaFilesToFormat() {
    List<File> javaFiles = new ArrayList<>();
    sourceSets.forEach { set ->
        javaFiles.addAll(set.java.files)
    }
    // Collect all java files in tests directory
    fileTree("${units}/testing").visit { details ->
        if (details.name.endsWith('java')) {
            javaFiles.add(details.file)
        }
    }
    fileTree("${units}/manual-tests").visit { details ->
        if (!(details.path.contains("typecheck") ||
            details.path.contains("inference") ||
            details.path.contains("CF-Tests")) &&
            details.name.endsWith('java')) {
            javaFiles.add(details.file)
        }
    }

    List<String> args = new ArrayList<>();
    for (File f : javaFiles) {
        args += f.absolutePath
        // print f.absolutePath + "\n"
    }
    return args
}

task checkFormat(type: Exec, dependsOn: [getCodeFormatScripts, pythonIsInstalled], group: 'Format') {
    description 'Check whether the source code is properly formatted'
    executable 'python'
    doFirst {
        args += "${formatScripts}/check-google-java-format.py"
        args += "--aosp" // 4 space indentation
        args += getJavaFilesToFormat()
    }
    ignoreExitValue = true
    doLast {
        if (execResult.exitValue != 0) {
            throw new RuntimeException('Found improper formatting, try running:  ./gradlew reformat"')
        }
    }
}

task reformat(type: Exec, dependsOn: [getCodeFormatScripts, pythonIsInstalled], group: 'Format') {
    description 'Format the Java source code'
    // jdk8 and checker-qual have no source, so skip
    executable 'python'
    doFirst {
        args += "${formatScripts}/run-google-java-format.py"
        args += "--aosp" // 4 space indentation
        args += getJavaFilesToFormat()
    }
}

tasks.test.dependsOn 'checkFormat'

task installGitHooks(type: Copy) {
    description 'Copies git hooks to .git directory'
    from files("scripts/git.pre-commit")
    rename('git\\.(.*)', '$1')
    into '.git/hooks'
}
