import units.qual.*;

package java.lang;

/**
 * This stub file provides units annotations for Java 8 Math class.
 */
class Math {
    // Scalar Constants
    static final @Dimensionless double E;
    static final @Dimensionless double PI;

    // Methods ========

    // Trigonometry
    static @Dimensionless double sin(@rad double a);
    static @Dimensionless double cos(@rad double a);
    static @Dimensionless double tan(@rad double a);

    // Inverse Trigonometry
    static @rad double asin(@Dimensionless double a);
    static @rad double acos(@Dimensionless double a);
    static @rad double atan(@Dimensionless double a);

    // same as atan(y/x) but sensitive to the sign of y and x
    @UnitsSame(fst = 1, snd = 2)
    static @rad double atan2(@UnknownUnits double y, @UnknownUnits double x);

    // Hyperbolic Trigonometry
    // takes as input a hyperbolic angle which is also in radians for Math lib
    // implementation
    static @Dimensionless double sinh(@rad double x);
    static @Dimensionless double cosh(@rad double x);
    static @Dimensionless double tanh(@rad double x);

    // both x & y must be same unit and if so returns that unit
    // res = sqrt( x^2 + y^2 )
    @UnitsSame(fst = -1, snd = 1)
    @UnitsSame(fst = 1, snd = 2)
    static @UnknownUnits double hypot(@UnknownUnits double x, @UnknownUnits double y);

    // Angle Conversion
    static @deg double toDegrees(@rad double angrad);
    static @rad double toRadians(@deg double angdeg);

    // Absolute Val
    @UnitsSame(fst = -1, snd = 1)
    static @UnknownUnits double abs(@UnknownUnits double a);
    @UnitsSame(fst = -1, snd = 1)
    static @UnknownUnits float abs(@UnknownUnits float a);
    @UnitsSame(fst = -1, snd = 1)
    static @UnknownUnits int abs(@UnknownUnits int a);
    @UnitsSame(fst = -1, snd = 1)
    static @UnknownUnits long abs(@UnknownUnits long a);

    // Exact operations
    // returns a++ or exception if it overflows, same unit as a
    @UnitsSame(fst = -1, snd = 1)
    static @UnknownUnits int incrementExact(@UnknownUnits int a);
    @UnitsSame(fst = -1, snd = 1)
    static @UnknownUnits long incrementExact(@UnknownUnits long a);
    // returns a-- or exception if it overflows, same unit as a
    @UnitsSame(fst = -1, snd = 1)
    static @UnknownUnits int decrementExact(@UnknownUnits int a);
    @UnitsSame(fst = -1, snd = 1)
    static @UnknownUnits long decrementExact(@UnknownUnits long a);
    // returns -1 * a, or exception if it overflows
    @UnitsSame(fst = -1, snd = 1)
    static @UnknownUnits int negateExact(@UnknownUnits int a);
    @UnitsSame(fst = -1, snd = 1)
    static @UnknownUnits long negateExact(@UnknownUnits long a);

    // same as addition, throws exception if it overflows
    @UnitsAddition(res = -1, larg = 1, rarg = 2)
    static @UnknownUnits int addExact(@UnknownUnits int x, @UnknownUnits int y);
    @UnitsAddition(res = -1, larg = 1, rarg = 2)
    static @UnknownUnits long addExact(@UnknownUnits long x, @UnknownUnits long y);

    // same as subtraction, throws exception if it overflows
    @UnitsSubtraction(res = -1, larg = 1, rarg = 2)
    static @UnknownUnits int subtractExact(@UnknownUnits int x, @UnknownUnits int y);
    @UnitsSubtraction(res = -1, larg = 1, rarg = 2)
    static @UnknownUnits long subtractExact(@UnknownUnits long x, @UnknownUnits long y);

    // same as multiplication, throws exception if it overflows
    @UnitsMultiplication(res = -1, larg = 1, rarg = 2)
    static @UnknownUnits int multiplyExact(@UnknownUnits int x, @UnknownUnits int y);
    @UnitsMultiplication(res = -1, larg = 1, rarg = 2)
    static @UnknownUnits long multiplyExact(@UnknownUnits long x, @UnknownUnits long y);

    // returns largest value Q such that Q <= [x / y] in integer division, the
    // returned unit is the same as the unit resulting from x / y
    @UnitsDivision(res = -1, larg = 1, rarg = 2)
    static @UnknownUnits int floorDiv(@UnknownUnits int x, @UnknownUnits int y);
    @UnitsDivision(res = -1, larg = 1, rarg = 2)
    static @UnknownUnits long floorDiv(@UnknownUnits long x, @UnknownUnits long y);

    // returns the IEEE spec remainder of f1 / f2; ie the exact value of
    // f1 â€“ [round[f1 / f2] * f2]. same unit as f1
    @UnitsSame(fst = -1, snd = 1)
    static @UnknownUnits double IEEEremainder(@UnknownUnits double f1, @UnknownUnits double f2);

    // similar to modulus, returns [x - [floorDiv[x, y] * y]], ie unit of x
    @UnitsSame(fst = -1, snd = 1)
    static @UnknownUnits int floorMod(@UnknownUnits int x, @UnknownUnits int y);
    @UnitsSame(fst = -1, snd = 1)
    static @UnknownUnits long floorMod(@UnknownUnits long x, @UnknownUnits long y);

    // TODO: special support for sqrt and cbrt?
    // static @UnitsBottom double sqrt(@UnknownUnits double a);
    // static @UnitsBottom double cbrt(@UnknownUnits double a);

    @UnitsSame(fst = -1, snd = 1)
    static @UnknownUnits double ceil(@UnknownUnits double a);
    @UnitsSame(fst = -1, snd = 1)
    static @UnknownUnits double floor(@UnknownUnits double a);

    // returns a value where the magnitude is the same as the first argument,
    // and the sign is the same as the second argument
    @UnitsSame(fst = -1, snd = 1)
    static @UnknownUnits double copySign(@UnknownUnits double magnitude, @UnknownUnits double sign);
    @UnitsSame(fst = -1, snd = 1)
    static @UnknownUnits float copySign(@UnknownUnits float magnitude, @UnknownUnits float sign);

    // returns the sign of the argument, the sign is a unitless scalar
    // Note: in some physics calculations, the sign denotes the relative
    // direction of a vector component (Future idea: vector mathematics support)
    static @Dimensionless double signum(@UnknownUnits double d);
    static @Dimensionless float signum(@UnknownUnits float f);

    // TODO: returns the value of a ^ b, with a unit if b is a statically known constant
    // static @UnitsBottom double pow(@UnknownUnits double a, @UnknownUnits double b);

    // calculates e^a == e * e * e .... which is a unitless scalar
    static @Dimensionless double exp(@Dimensionless double a);
    // calculates e^x - 1 ... which is also a unitless scalar
    static @Dimensionless double expm1(@Dimensionless double x);

    // returns unbiased exponent used in the representation of a double, ie the
    // exponent in base 2 arithmetic => unitless constant
    static @Dimensionless int getExponent(@UnknownUnits double d);
    static @Dimensionless int getExponent(@UnknownUnits float f);

    // log[a] = y where e^y = a, this is log with base e, a must be dimensionless
    static @Dimensionless double log(@Dimensionless double a);

    // log with base 10, log10[x] = y where 10^y = x
    static @Dimensionless double log10(@Dimensionless double a);

    // returns log[1.0 + x]
    static @Dimensionless double log1p(@Dimensionless double x);

    // min and max
    // both x & y should be the same unit, if so returns that unit, otherwise
    // returns the LUB of the 2 units
    static @PolyUnit double max(@PolyUnit double a, @PolyUnit double b);
    static @PolyUnit float max(@PolyUnit float a, @PolyUnit float b);
    static @PolyUnit int max(@PolyUnit int a, @PolyUnit int b);
    static @PolyUnit long max(@PolyUnit long a, @PolyUnit long b);

    // both x & y should be the same unit, if so returns that unit, otherwise
    // returns the LUB of the 2 units
    static @PolyUnit double min(@PolyUnit double a, @PolyUnit double b);
    static @PolyUnit float min(@PolyUnit float a, @PolyUnit float b);
    static @PolyUnit int min(@PolyUnit int a, @PolyUnit int b);
    static @PolyUnit long min(@PolyUnit long a, @PolyUnit long b);

    // start and direction should be the same unit, if so returns that unit,
    // otherwise returns the LUB of the 2 units
    // if start > direction, returns start - [smallest double increment:
    // 0.000....04], conceptually a tiny i--
    @UnitsSame(fst = -1, snd = 1)
    @UnitsSame(fst = 1, snd = 2)
    static @UnknownUnits double nextAfter(@UnknownUnits double start, @UnknownUnits double direction);
    // if start < direction, returns start + smallest increment, conceptually a
    // tiny i++
    @UnitsSame(fst = -1, snd = 1)
    @UnitsSame(fst = 1, snd = 2)
    static @UnknownUnits float nextAfter(@UnknownUnits float start, @UnknownUnits double direction);

    // tiny i++
    @UnitsSame(fst = -1, snd = 1)
    static @UnknownUnits double nextUp(@UnknownUnits double d);
    @UnitsSame(fst = -1, snd = 1)
    static @UnknownUnits float nextUp(@UnknownUnits float f);

    // tiny i--
    @UnitsSame(fst = -1, snd = 1)
    static @UnknownUnits double nextDown(@UnknownUnits double d);
    @UnitsSame(fst = -1, snd = 1)
    static @UnknownUnits float nextDown(@UnknownUnits float f);

    static @Dimensionless double random();

    // rounding a to the closest int value, but still returns as a double, same
    // unit as a
    @UnitsSame(fst = -1, snd = 1)
    static @UnknownUnits double rint(@UnknownUnits double a);
    // same unit as a
    @UnitsSame(fst = -1, snd = 1)
    static @UnknownUnits long round(@UnknownUnits double a);
    @UnitsSame(fst = -1, snd = 1)
    static @UnknownUnits int round(@UnknownUnits float a);
    // returns value of long, or exception if it overflows an int; long to int
    // conversion, same unit as value
    @UnitsSame(fst = -1, snd = 1)
    static @UnknownUnits int toIntExact(@UnknownUnits long value);

    // returns d x 2 ^ scaleFactor, same unit as d
    @UnitsSame(fst = -1, snd = 1)
    static @UnknownUnits double scalb(@UnknownUnits double d, @UnknownUnits int scaleFactor);
    @UnitsSame(fst = -1, snd = 1)
    static @UnknownUnits float scalb(@UnknownUnits float f, @UnknownUnits int scaleFactor);

    // an ulp of a double is the positive distance between this value and the
    // double value next larger in magnitude
    // ulp() returns the size of an ulp of the argument
    @UnitsSame(fst = -1, snd = 1)
    static @UnknownUnits double ulp(@UnknownUnits double d);
    @UnitsSame(fst = -1, snd = 1)
    static @UnknownUnits float ulp(@UnknownUnits float f);
}

