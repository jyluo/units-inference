import units.qual.*;

package java.util.concurrent;

enum TimeUnit {
    @ns NANOSECONDS,
    @us MICROSECONDS,
    @ms MILLISECONDS,
    @s SECONDS,
    @min MINUTES,
    @h HOURS,
    @day DAYS;

    // For example, to convert 10 minutes to milliseconds, use:
    // TimeUnit.MILLISECONDS.convert(10L, TimeUnit.MINUTES)
    // ensure source value and unit are equal
    @UnitsSame(fst = 1, snd = 2)
    @PolyUnit long convert(@PolyUnit TimeUnit this, @UnknownUnits long sourceDuration,
            @UnknownUnits TimeUnit sourceUnit);

    // TODO: add dimensional bound on duration to be a time value
    @ns long toNanos(@UnknownUnits TimeUnit this, @UnknownUnits long duration);

    @us long toMicros(@UnknownUnits TimeUnit this, @UnknownUnits long duration);

    @ms long toMillis(@UnknownUnits TimeUnit this, @UnknownUnits long duration);

    @s long toSeconds(@UnknownUnits TimeUnit this, @UnknownUnits long duration);

    @min long toMinutes(@UnknownUnits TimeUnit this, @UnknownUnits long duration);

    @h long toHours(@UnknownUnits TimeUnit this, @UnknownUnits long duration);

    @day long toDays(@UnknownUnits TimeUnit this, @UnknownUnits long duration);

    // enforce "this" has same unit as "timeout"
    @UnitsSame(fst = 0, snd = 2)
    void timedWait(@UnknownUnits TimeUnit this, @UnknownUnits Object obj,
            @UnknownUnits long timeout);

    @UnitsSame(fst = 0, snd = 2)
    void timedJoin(@UnknownUnits TimeUnit this, Thread thread, @UnknownUnits long timeout);

    @UnitsSame(fst = 0, snd = 1)
    void sleep(@UnknownUnits TimeUnit this, @UnknownUnits long timeout);
}

class ThreadPoolExecutor extends AbstractExecutorService {
    // keepAliveTime has same unit as unit
    @UnitsSame(fst = 3, snd = 4)
    ThreadPoolExecutor(int arg0, int arg1, @UnknownUnits long keepAliveTime,
            @UnknownUnits TimeUnit unit, BlockingQueue<Runnable> arg4);

    @UnitsSame(fst = 3, snd = 4)
    ThreadPoolExecutor(int arg0, int arg1, @UnknownUnits long keepAliveTime,
            @UnknownUnits TimeUnit unit, BlockingQueue<Runnable> arg4, ThreadFactory arg5);

    @UnitsSame(fst = 3, snd = 4)
    ThreadPoolExecutor(int arg0, int arg1, @UnknownUnits long keepAliveTime,
            @UnknownUnits TimeUnit unit, BlockingQueue<Runnable> arg4,
            RejectedExecutionHandler arg5);

    @UnitsSame(fst = 3, snd = 4)
    ThreadPoolExecutor(int arg0, int arg1, @UnknownUnits long keepAliveTime,
            @UnknownUnits TimeUnit unit, BlockingQueue<Runnable> arg4, ThreadFactory arg5,
            RejectedExecutionHandler arg6);

    @UnitsSame(fst = 1, snd = 2)
    boolean awaitTermination(@UnknownUnits long arg0, @UnknownUnits TimeUnit arg1)
            throws InterruptedException;

    @UnitsSame(fst = 1, snd = 2)
    void setKeepAliveTime(@UnknownUnits long arg0, @UnknownUnits TimeUnit arg1);

    @PolyUnit long getKeepAliveTime(@PolyUnit TimeUnit arg0);
}
