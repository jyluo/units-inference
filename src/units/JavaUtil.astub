import units.qual.*;

package java.util;

class Objects {
    @UnitsCompare(fst = 1, snd = 2)
    static boolean equals(@UnknownUnits Object arg0, @UnknownUnits Object arg1);
    @UnitsCompare(fst = 1, snd = 2)
    static boolean deepEquals(@UnknownUnits Object arg0, @UnknownUnits Object arg1);
    @UnitsCompare(fst = 1, snd = 2)
    static <T extends @UnknownUnits Object> int compare(T arg0, T arg1, Comparator<? super @UnitsBottom T> arg2);

    static int hashCode(@UnknownUnits Object arg0);
    static int hash(@UnknownUnits Object[] arg0);
    static String toString(@UnknownUnits Object arg0);
    static String toString(@UnknownUnits Object arg0, String arg1);

    static <T extends @UnknownUnits Object> T requireNonNull(T arg0);
    static <T extends @UnknownUnits Object> T requireNonNull(T arg0, String arg1);
    static <T extends @UnknownUnits Object> T requireNonNull(T arg0, Supplier<String> arg1);
    static boolean isNull(@UnknownUnits Object arg0);
    static boolean nonNull(@UnknownUnits Object arg0);
}

class Random implements Serializable {
    Random(@UnknownUnits long arg0);
    void setSeed(@UnknownUnits long arg0);
}

interface Comparator<T> {
    @UnitsCompare(fst = 1, snd = 2)
    int compare(T arg0, T arg1);
}
