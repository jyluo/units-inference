import units.qual.*;

package java.lang;

/**
 * This stub file provides units annotations for Java 7 and Java 8 Math class.
 *
 * New methods in Java 8:
 *
 * addExact(int x, int y)
 * addExact(long x, long y)
 * decrementExact(int a)
 * decrementExact(long a)
 * floorDiv(int x, int y)
 * floorDiv(long x, long y)
 * floorMod(int x, int y)
 * floorMod(long x, long y)
 * incrementExact(int a)
 * incrementExact(long a)
 * multiplyExact(int x, int y)
 * multiplyExact(long x, long y)
 * negateExact(int a)
 * negateExact(long a)
 * nextDown(double d)
 * nextDown(float f)
 * subtractExact(int x, int y)
 * subtractExact(long x, long y)
 * toIntExact(long value)
 */
class Math {
    // Trigonometry
//    static double sin(@rad double a);
//    static double cos(@rad double a);
//    static double tan(@rad double a);

    // Inverse Trigonometry
    static @rad double asin(double a);
    static @rad double acos(double a);
    static @rad double atan(double a);

    // x and y should be the same unit, returns the angle theta (in radians)
    // from the conversion of rectangular coordinates [x, y] to polar
    // coordinates [r, theta]
    // atan2(y, x) == atan(y / x) except the sign of both arguments are used to
    // determine the quadrant of the result
    // Units ATF ensures that y and x have the same units
    static @rad double atan2(@UnknownUnits double y, @UnknownUnits double x);
    // Inverse Trigonometry identities in terms of units (value is subject to
    // domain)
    // sin(asin(x)) == x
    // asin(sin(y)) == y
    // cos(acos(x)) == x
    // acos(cos(y)) == y
    // tan(atan(x)) == x
    // atan(tan(y)) == y
    // let z = y / x
    // z == tan(atan(z)) == tan(atan2(y, x))

    // Hyperbolic Trigonometry
    // takes as input a hyperbolic angle which is also in radians for Math lib
    // implementation
//    static double sinh(@rad double x);
//    static double cosh(@rad double x);
//    static double tanh(@rad double x);

//    // Angle Conversion
//    static @deg double toDegrees(@rad double angrad);
//    static @rad double toRadians(@deg double angdeg);
}

